-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toGray_AXIvideo2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    IN_STREAM_TVALID : IN STD_LOGIC;
    IN_STREAM_TREADY : OUT STD_LOGIC;
    IN_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    IN_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    IN_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_0_V_full_n : IN STD_LOGIC;
    img_data_stream_0_V_write : OUT STD_LOGIC;
    img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_1_V_full_n : IN STD_LOGIC;
    img_data_stream_1_V_write : OUT STD_LOGIC;
    img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_2_V_full_n : IN STD_LOGIC;
    img_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of toGray_AXIvideo2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_pp1_stg0_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st7_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st8_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal eol_1_reg_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_reg_195 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_1_reg_206 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_2_reg_229 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_241 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_2_reg_253 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_75 : BOOLEAN;
    signal tmp_data_V_reg_402 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_87 : BOOLEAN;
    signal tmp_last_V_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal i_V_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_reg_426 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal brmerge_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_120 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_133 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal j_V_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_449 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_158 : BOOLEAN;
    signal ap_sig_bdd_163 : BOOLEAN;
    signal axi_last_V_3_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_reg_153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_181 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal axi_data_V_3_reg_276 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_data_V1_reg_163 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_s_reg_173 : STD_LOGIC_VECTOR (11 downto 0);
    signal eol_1_phi_fu_187_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_phi_fu_198_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal eol_phi_fu_221_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_axi_last_V_2_reg_229pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_phi_fu_245_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_reg_phiprechg_eol_2_reg_253pp1_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_1_mux_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal eol_3_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal sof_1_fu_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sof_2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_bdd_119 : BOOLEAN;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal ap_sig_bdd_229 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_319_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- axi_data_V1_reg_163 assign process. --
    axi_data_V1_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_data_V1_reg_163 <= tmp_data_V_reg_402;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_data_V1_reg_163 <= axi_data_V_3_reg_276;
            end if; 
        end if;
    end process;

    -- axi_data_V_1_reg_195 assign process. --
    axi_data_V_1_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                axi_data_V_1_reg_195 <= p_Val2_s_reg_241;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0))) then 
                axi_data_V_1_reg_195 <= axi_data_V1_reg_163;
            end if; 
        end if;
    end process;

    -- axi_data_V_3_reg_276 assign process. --
    axi_data_V_3_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0)))) then 
                axi_data_V_3_reg_276 <= axi_data_V_1_phi_fu_198_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_288) and not(ap_sig_bdd_163))) then 
                axi_data_V_3_reg_276 <= IN_STREAM_TDATA;
            end if; 
        end if;
    end process;

    -- axi_last_V1_reg_153 assign process. --
    axi_last_V1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                axi_last_V1_reg_153 <= tmp_last_V_reg_410;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                axi_last_V1_reg_153 <= axi_last_V_3_reg_264;
            end if; 
        end if;
    end process;

    -- axi_last_V_2_reg_229 assign process. --
    axi_last_V_2_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_144) then
                if (ap_sig_bdd_211) then 
                    axi_last_V_2_reg_229 <= eol_1_phi_fu_187_p4;
                elsif (ap_sig_bdd_119) then 
                    axi_last_V_2_reg_229 <= IN_STREAM_TLAST;
                elsif ((ap_true = ap_true)) then 
                    axi_last_V_2_reg_229 <= ap_reg_phiprechg_axi_last_V_2_reg_229pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- axi_last_V_3_reg_264 assign process. --
    axi_last_V_3_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0)))) then 
                axi_last_V_3_reg_264 <= eol_1_phi_fu_187_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_288) and not(ap_sig_bdd_163))) then 
                axi_last_V_3_reg_264 <= IN_STREAM_TLAST;
            end if; 
        end if;
    end process;

    -- eol_1_reg_184 assign process. --
    eol_1_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_1_reg_184 <= axi_last_V_2_reg_229;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0))) then 
                eol_1_reg_184 <= axi_last_V1_reg_153;
            end if; 
        end if;
    end process;

    -- eol_2_reg_253 assign process. --
    eol_2_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_144) then
                if (ap_sig_bdd_211) then 
                    eol_2_reg_253 <= axi_last_V_1_mux_fu_356_p2;
                elsif (ap_sig_bdd_119) then 
                    eol_2_reg_253 <= IN_STREAM_TLAST;
                elsif ((ap_true = ap_true)) then 
                    eol_2_reg_253 <= ap_reg_phiprechg_eol_2_reg_253pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- eol_3_reg_288 assign process. --
    eol_3_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0)))) then 
                eol_3_reg_288 <= eol_phi_fu_221_p4;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_288) and not(ap_sig_bdd_163))) then 
                eol_3_reg_288 <= IN_STREAM_TLAST;
            end if; 
        end if;
    end process;

    -- eol_reg_217 assign process. --
    eol_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                eol_reg_217 <= eol_2_reg_253;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0))) then 
                eol_reg_217 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- p_1_reg_206 assign process. --
    p_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                p_1_reg_206 <= j_V_fu_335_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond1_fu_319_p2 = ap_const_lv1_0))) then 
                p_1_reg_206 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- p_Val2_s_reg_241 assign process. --
    p_Val2_s_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_144) then
                if (ap_sig_bdd_211) then 
                    p_Val2_s_reg_241 <= axi_data_V_1_phi_fu_198_p4;
                elsif (ap_sig_bdd_119) then 
                    p_Val2_s_reg_241 <= IN_STREAM_TDATA;
                elsif ((ap_true = ap_true)) then 
                    p_Val2_s_reg_241 <= ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0;
                end if;
            end if; 
        end if;
    end process;

    -- p_s_reg_173 assign process. --
    p_s_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                p_s_reg_173 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_6)) then 
                p_s_reg_173 <= i_V_reg_426;
            end if; 
        end if;
    end process;

    -- sof_1_fu_98 assign process. --
    sof_1_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
                sof_1_fu_98 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                sof_1_fu_98 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                exitcond2_reg_431 <= exitcond2_fu_330_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                i_V_reg_426 <= i_V_fu_324_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                tmp_1_reg_444 <= tmp_1_fu_363_p1;
                tmp_2_reg_449 <= p_Val2_s_phi_fu_245_p4(15 downto 8);
                tmp_7_reg_454 <= p_Val2_s_phi_fu_245_p4(23 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((IN_STREAM_TVALID = ap_const_logic_0)))) then
                tmp_data_V_reg_402 <= IN_STREAM_TDATA;
                tmp_last_V_reg_410 <= IN_STREAM_TLAST;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, IN_STREAM_TVALID, ap_sig_bdd_75, exitcond1_fu_319_p2, exitcond2_fu_330_p2, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1, ap_sig_bdd_163, eol_3_reg_288, tmp_user_V_fu_310_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_75)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((IN_STREAM_TVALID = ap_const_logic_0)) and (ap_const_lv1_0 = tmp_user_V_fu_310_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((IN_STREAM_TVALID = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_user_V_fu_310_p1)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((exitcond1_fu_319_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_pp1_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not((exitcond2_fu_330_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_4;
                end if;
            when ap_ST_st7_fsm_5 => 
                if (((ap_const_lv1_0 = eol_3_reg_288) and not(ap_sig_bdd_163))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                elsif ((not(ap_sig_bdd_163) and not((ap_const_lv1_0 = eol_3_reg_288)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_5;
                end if;
            when ap_ST_st8_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- IN_STREAM_TREADY assign process. --
    IN_STREAM_TREADY_assign_proc : process(IN_STREAM_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_330_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, brmerge_fu_344_p2, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st7_fsm_5, ap_sig_bdd_163, eol_3_reg_288)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((IN_STREAM_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_5) and (ap_const_lv1_0 = eol_3_reg_288) and not(ap_sig_bdd_163)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_344_p2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))))) then 
            IN_STREAM_TREADY <= ap_const_logic_1;
        else 
            IN_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_319_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_319_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond1_fu_319_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond1_fu_319_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_axi_last_V_2_reg_229pp1_it0 <= "X";
    ap_reg_phiprechg_eol_2_reg_253pp1_it0 <= "X";
    ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(exitcond2_fu_330_p2, brmerge_fu_344_p2)
    begin
                ap_sig_bdd_119 <= ((exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_344_p2));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(IN_STREAM_TVALID, exitcond2_fu_330_p2, brmerge_fu_344_p2)
    begin
                ap_sig_bdd_120 <= ((IN_STREAM_TVALID = ap_const_logic_0) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = brmerge_fu_344_p2));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(img_data_stream_0_V_full_n, img_data_stream_1_V_full_n, img_data_stream_2_V_full_n, exitcond2_reg_431)
    begin
                ap_sig_bdd_133 <= (((img_data_stream_0_V_full_n = ap_const_logic_0) and (exitcond2_reg_431 = ap_const_lv1_0)) or ((exitcond2_reg_431 = ap_const_lv1_0) and (img_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond2_reg_431 = ap_const_lv1_0) and (img_data_stream_2_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1)
    begin
                ap_sig_bdd_144 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))));
    end process;


    -- ap_sig_bdd_158 assign process. --
    ap_sig_bdd_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_158 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(IN_STREAM_TVALID, eol_3_reg_288)
    begin
                ap_sig_bdd_163 <= ((IN_STREAM_TVALID = ap_const_logic_0) and (ap_const_lv1_0 = eol_3_reg_288));
    end process;


    -- ap_sig_bdd_181 assign process. --
    ap_sig_bdd_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_181 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(exitcond2_fu_330_p2, brmerge_fu_344_p2)
    begin
                ap_sig_bdd_211 <= ((exitcond2_fu_330_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = brmerge_fu_344_p2)));
    end process;


    -- ap_sig_bdd_229 assign process. --
    ap_sig_bdd_229_assign_proc : process(exitcond2_fu_330_p2, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it0)
    begin
                ap_sig_bdd_229 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_fu_330_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_75 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_87 assign process. --
    ap_sig_bdd_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_87 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_4_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_87)
    begin
        if (ap_sig_bdd_87) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_5 assign process. --
    ap_sig_cseq_ST_st7_fsm_5_assign_proc : process(ap_sig_bdd_158)
    begin
        if (ap_sig_bdd_158) then 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_6 assign process. --
    ap_sig_cseq_ST_st8_fsm_6_assign_proc : process(ap_sig_bdd_181)
    begin
        if (ap_sig_bdd_181) then 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- axi_data_V_1_phi_fu_198_p4 assign process. --
    axi_data_V_1_phi_fu_198_p4_assign_proc : process(axi_data_V_1_reg_195, p_Val2_s_reg_241, exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            axi_data_V_1_phi_fu_198_p4 <= p_Val2_s_reg_241;
        else 
            axi_data_V_1_phi_fu_198_p4 <= axi_data_V_1_reg_195;
        end if; 
    end process;

    axi_last_V_1_mux_fu_356_p2 <= (eol_1_phi_fu_187_p4 or not_sof_2_fu_350_p2);
    brmerge_fu_344_p2 <= (sof_1_fu_98 or eol_phi_fu_221_p4);

    -- eol_1_phi_fu_187_p4 assign process. --
    eol_1_phi_fu_187_p4_assign_proc : process(eol_1_reg_184, axi_last_V_2_reg_229, exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_1_phi_fu_187_p4 <= axi_last_V_2_reg_229;
        else 
            eol_1_phi_fu_187_p4 <= eol_1_reg_184;
        end if; 
    end process;


    -- eol_phi_fu_221_p4 assign process. --
    eol_phi_fu_221_p4_assign_proc : process(eol_reg_217, eol_2_reg_253, exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            eol_phi_fu_221_p4 <= eol_2_reg_253;
        else 
            eol_phi_fu_221_p4 <= eol_reg_217;
        end if; 
    end process;

    exitcond1_fu_319_p2 <= "1" when (p_s_reg_173 = img_rows_V_read) else "0";
    exitcond2_fu_330_p2 <= "1" when (p_1_reg_206 = img_cols_V_read) else "0";
    i_V_fu_324_p2 <= std_logic_vector(unsigned(p_s_reg_173) + unsigned(ap_const_lv12_1));
    img_data_stream_0_V_din <= tmp_1_reg_444;

    -- img_data_stream_0_V_write assign process. --
    img_data_stream_0_V_write_assign_proc : process(exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_1_V_din <= tmp_2_reg_449;

    -- img_data_stream_1_V_write assign process. --
    img_data_stream_1_V_write_assign_proc : process(exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_2_V_din <= tmp_7_reg_454;

    -- img_data_stream_2_V_write assign process. --
    img_data_stream_2_V_write_assign_proc : process(exitcond2_reg_431, ap_sig_cseq_ST_pp1_stg0_fsm_4, ap_sig_bdd_120, ap_reg_ppiten_pp1_it0, ap_sig_bdd_133, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_4) and (exitcond2_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_sig_bdd_120 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or (ap_sig_bdd_133 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            img_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_335_p2 <= std_logic_vector(unsigned(p_1_reg_206) + unsigned(ap_const_lv12_1));
    not_sof_2_fu_350_p2 <= (sof_1_fu_98 xor ap_const_lv1_1);

    -- p_Val2_s_phi_fu_245_p4 assign process. --
    p_Val2_s_phi_fu_245_p4_assign_proc : process(IN_STREAM_TDATA, brmerge_fu_344_p2, axi_data_V_1_phi_fu_198_p4, ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0, ap_sig_bdd_229)
    begin
        if (ap_sig_bdd_229) then
            if (not((ap_const_lv1_0 = brmerge_fu_344_p2))) then 
                p_Val2_s_phi_fu_245_p4 <= axi_data_V_1_phi_fu_198_p4;
            elsif ((ap_const_lv1_0 = brmerge_fu_344_p2)) then 
                p_Val2_s_phi_fu_245_p4 <= IN_STREAM_TDATA;
            else 
                p_Val2_s_phi_fu_245_p4 <= ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0;
            end if;
        else 
            p_Val2_s_phi_fu_245_p4 <= ap_reg_phiprechg_p_Val2_s_reg_241pp1_it0;
        end if; 
    end process;

    tmp_1_fu_363_p1 <= p_Val2_s_phi_fu_245_p4(8 - 1 downto 0);
    tmp_user_V_fu_310_p1 <= IN_STREAM_TUSER;
end behav;
