-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity toGray is
port (
    IN_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    IN_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    IN_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    IN_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    IN_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    IN_STREAM_TVALID : IN STD_LOGIC;
    IN_STREAM_TREADY : OUT STD_LOGIC;
    OUT_STREAM_TVALID : OUT STD_LOGIC;
    OUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of toGray is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "toGray,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.705500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=7,HLS_SYN_FF=2852,HLS_SYN_LUT=5285}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal toGray_Block_proc_U0_ap_start : STD_LOGIC;
    signal toGray_Block_proc_U0_ap_done : STD_LOGIC;
    signal toGray_Block_proc_U0_ap_continue : STD_LOGIC;
    signal toGray_Block_proc_U0_ap_idle : STD_LOGIC;
    signal toGray_Block_proc_U0_ap_ready : STD_LOGIC;
    signal toGray_Block_proc_U0_rows : STD_LOGIC_VECTOR (31 downto 0);
    signal toGray_Block_proc_U0_cols : STD_LOGIC_VECTOR (31 downto 0);
    signal toGray_Block_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Block_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel : STD_LOGIC;
    signal inMat_cols_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_inMat_cols_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_inMat_cols_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1 : STD_LOGIC;
    signal inMat_rows_V_channel1_full_n : STD_LOGIC;
    signal ap_reg_ready_inMat_rows_V_channel1_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_inMat_rows_V_channel1_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel : STD_LOGIC;
    signal inMat_rows_V_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_inMat_rows_V_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_inMat_rows_V_channel_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1 : STD_LOGIC;
    signal inMat_cols_V_channel1_full_n : STD_LOGIC;
    signal ap_reg_ready_inMat_cols_V_channel1_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_inMat_cols_V_channel1_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V : STD_LOGIC;
    signal grayMat_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_grayMat_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_grayMat_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V : STD_LOGIC;
    signal grayMat_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_grayMat_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_grayMat_cols_V_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_outMat_rows_V : STD_LOGIC;
    signal outMat_rows_V_full_n : STD_LOGIC;
    signal ap_reg_ready_outMat_rows_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_outMat_rows_V_full_n : STD_LOGIC;
    signal ap_chn_write_toGray_Block_proc_U0_outMat_cols_V : STD_LOGIC;
    signal outMat_cols_V_full_n : STD_LOGIC;
    signal ap_reg_ready_outMat_cols_V_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_outMat_cols_V_full_n : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TVALID : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TREADY : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_AXIvideo2Mat_U0_IN_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_data_stream_0_V_full_n : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_data_stream_1_V_full_n : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_AXIvideo2Mat_U0_img_data_stream_2_V_full_n : STD_LOGIC;
    signal toGray_AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal toGray_CvtColor_U0_ap_start : STD_LOGIC;
    signal toGray_CvtColor_U0_ap_done : STD_LOGIC;
    signal toGray_CvtColor_U0_ap_continue : STD_LOGIC;
    signal toGray_CvtColor_U0_ap_idle : STD_LOGIC;
    signal toGray_CvtColor_U0_ap_ready : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_CvtColor_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_CvtColor_U0_p_src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_CvtColor_U0_p_src_data_stream_0_V_empty_n : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_CvtColor_U0_p_src_data_stream_1_V_empty_n : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_CvtColor_U0_p_src_data_stream_2_V_empty_n : STD_LOGIC;
    signal toGray_CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal toGray_CvtColor_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_CvtColor_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal toGray_CvtColor_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal toGray_Equalize_U0_ap_start : STD_LOGIC;
    signal toGray_Equalize_U0_ap_done : STD_LOGIC;
    signal toGray_Equalize_U0_ap_continue : STD_LOGIC;
    signal toGray_Equalize_U0_ap_idle : STD_LOGIC;
    signal toGray_Equalize_U0_ap_ready : STD_LOGIC;
    signal toGray_Equalize_U0_p_src_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Equalize_U0_p_src_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Equalize_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_Equalize_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal toGray_Equalize_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal toGray_Equalize_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_Equalize_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal toGray_Equalize_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_start : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_done : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TVALID : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TREADY : STD_LOGIC;
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal inMat_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_rows_V_channel_write : STD_LOGIC;
    signal inMat_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_rows_V_channel_empty_n : STD_LOGIC;
    signal inMat_rows_V_channel_read : STD_LOGIC;
    signal inMat_rows_V_channel1_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_rows_V_channel1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_rows_V_channel1_write : STD_LOGIC;
    signal inMat_rows_V_channel1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_rows_V_channel1_empty_n : STD_LOGIC;
    signal inMat_rows_V_channel1_read : STD_LOGIC;
    signal inMat_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_cols_V_channel_write : STD_LOGIC;
    signal inMat_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_cols_V_channel_empty_n : STD_LOGIC;
    signal inMat_cols_V_channel_read : STD_LOGIC;
    signal inMat_cols_V_channel1_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_cols_V_channel1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_cols_V_channel1_write : STD_LOGIC;
    signal inMat_cols_V_channel1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal inMat_cols_V_channel1_empty_n : STD_LOGIC;
    signal inMat_cols_V_channel1_read : STD_LOGIC;
    signal grayMat_rows_V_U_ap_dummy_ce : STD_LOGIC;
    signal grayMat_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal grayMat_rows_V_write : STD_LOGIC;
    signal grayMat_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal grayMat_rows_V_empty_n : STD_LOGIC;
    signal grayMat_rows_V_read : STD_LOGIC;
    signal grayMat_cols_V_U_ap_dummy_ce : STD_LOGIC;
    signal grayMat_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal grayMat_cols_V_write : STD_LOGIC;
    signal grayMat_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal grayMat_cols_V_empty_n : STD_LOGIC;
    signal grayMat_cols_V_read : STD_LOGIC;
    signal outMat_rows_V_U_ap_dummy_ce : STD_LOGIC;
    signal outMat_rows_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal outMat_rows_V_write : STD_LOGIC;
    signal outMat_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal outMat_rows_V_empty_n : STD_LOGIC;
    signal outMat_rows_V_read : STD_LOGIC;
    signal outMat_cols_V_U_ap_dummy_ce : STD_LOGIC;
    signal outMat_cols_V_din : STD_LOGIC_VECTOR (11 downto 0);
    signal outMat_cols_V_write : STD_LOGIC;
    signal outMat_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal outMat_cols_V_empty_n : STD_LOGIC;
    signal outMat_cols_V_read : STD_LOGIC;
    signal inMat_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_0_V_full_n : STD_LOGIC;
    signal inMat_data_stream_0_V_write : STD_LOGIC;
    signal inMat_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_0_V_empty_n : STD_LOGIC;
    signal inMat_data_stream_0_V_read : STD_LOGIC;
    signal inMat_data_stream_1_V_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_1_V_full_n : STD_LOGIC;
    signal inMat_data_stream_1_V_write : STD_LOGIC;
    signal inMat_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_1_V_empty_n : STD_LOGIC;
    signal inMat_data_stream_1_V_read : STD_LOGIC;
    signal inMat_data_stream_2_V_U_ap_dummy_ce : STD_LOGIC;
    signal inMat_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_2_V_full_n : STD_LOGIC;
    signal inMat_data_stream_2_V_write : STD_LOGIC;
    signal inMat_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inMat_data_stream_2_V_empty_n : STD_LOGIC;
    signal inMat_data_stream_2_V_read : STD_LOGIC;
    signal grayMat_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal grayMat_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grayMat_data_stream_0_V_full_n : STD_LOGIC;
    signal grayMat_data_stream_0_V_write : STD_LOGIC;
    signal grayMat_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grayMat_data_stream_0_V_empty_n : STD_LOGIC;
    signal grayMat_data_stream_0_V_read : STD_LOGIC;
    signal outMat_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal outMat_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal outMat_data_stream_0_V_full_n : STD_LOGIC;
    signal outMat_data_stream_0_V_write : STD_LOGIC;
    signal outMat_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal outMat_data_stream_0_V_empty_n : STD_LOGIC;
    signal outMat_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_toGray_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_toGray_AXIvideo2Mat_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_toGray_CvtColor_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_toGray_Equalize_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component toGray_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component toGray_AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        IN_STREAM_TVALID : IN STD_LOGIC;
        IN_STREAM_TREADY : OUT STD_LOGIC;
        IN_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        IN_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        IN_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        IN_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        IN_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        IN_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component toGray_CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component toGray_Equalize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component toGray_Mat2AXIvideo_8_1080_1920_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        OUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        OUT_STREAM_TVALID : OUT STD_LOGIC;
        OUT_STREAM_TREADY : IN STD_LOGIC;
        OUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_toGray_inMat_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_rows_V_channel1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_cols_V_channel1 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_grayMat_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_grayMat_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_outMat_rows_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_outMat_cols_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_data_stream_1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_inMat_data_stream_2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_grayMat_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_toGray_outMat_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    toGray_Block_proc_U0 : component toGray_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => toGray_Block_proc_U0_ap_start,
        ap_done => toGray_Block_proc_U0_ap_done,
        ap_continue => toGray_Block_proc_U0_ap_continue,
        ap_idle => toGray_Block_proc_U0_ap_idle,
        ap_ready => toGray_Block_proc_U0_ap_ready,
        rows => toGray_Block_proc_U0_rows,
        cols => toGray_Block_proc_U0_cols,
        ap_return_0 => toGray_Block_proc_U0_ap_return_0,
        ap_return_1 => toGray_Block_proc_U0_ap_return_1,
        ap_return_2 => toGray_Block_proc_U0_ap_return_2,
        ap_return_3 => toGray_Block_proc_U0_ap_return_3,
        ap_return_4 => toGray_Block_proc_U0_ap_return_4,
        ap_return_5 => toGray_Block_proc_U0_ap_return_5,
        ap_return_6 => toGray_Block_proc_U0_ap_return_6,
        ap_return_7 => toGray_Block_proc_U0_ap_return_7);

    toGray_AXIvideo2Mat_U0 : component toGray_AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => toGray_AXIvideo2Mat_U0_ap_start,
        ap_done => toGray_AXIvideo2Mat_U0_ap_done,
        ap_continue => toGray_AXIvideo2Mat_U0_ap_continue,
        ap_idle => toGray_AXIvideo2Mat_U0_ap_idle,
        ap_ready => toGray_AXIvideo2Mat_U0_ap_ready,
        IN_STREAM_TDATA => toGray_AXIvideo2Mat_U0_IN_STREAM_TDATA,
        IN_STREAM_TVALID => toGray_AXIvideo2Mat_U0_IN_STREAM_TVALID,
        IN_STREAM_TREADY => toGray_AXIvideo2Mat_U0_IN_STREAM_TREADY,
        IN_STREAM_TKEEP => toGray_AXIvideo2Mat_U0_IN_STREAM_TKEEP,
        IN_STREAM_TSTRB => toGray_AXIvideo2Mat_U0_IN_STREAM_TSTRB,
        IN_STREAM_TUSER => toGray_AXIvideo2Mat_U0_IN_STREAM_TUSER,
        IN_STREAM_TLAST => toGray_AXIvideo2Mat_U0_IN_STREAM_TLAST,
        IN_STREAM_TID => toGray_AXIvideo2Mat_U0_IN_STREAM_TID,
        IN_STREAM_TDEST => toGray_AXIvideo2Mat_U0_IN_STREAM_TDEST,
        img_rows_V_read => toGray_AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_read => toGray_AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => toGray_AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => toGray_AXIvideo2Mat_U0_img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => toGray_AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => toGray_AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => toGray_AXIvideo2Mat_U0_img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => toGray_AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => toGray_AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => toGray_AXIvideo2Mat_U0_img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => toGray_AXIvideo2Mat_U0_img_data_stream_2_V_write);

    toGray_CvtColor_U0 : component toGray_CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => toGray_CvtColor_U0_ap_start,
        ap_done => toGray_CvtColor_U0_ap_done,
        ap_continue => toGray_CvtColor_U0_ap_continue,
        ap_idle => toGray_CvtColor_U0_ap_idle,
        ap_ready => toGray_CvtColor_U0_ap_ready,
        p_src_rows_V_read => toGray_CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_read => toGray_CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => toGray_CvtColor_U0_p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n => toGray_CvtColor_U0_p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read => toGray_CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => toGray_CvtColor_U0_p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n => toGray_CvtColor_U0_p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read => toGray_CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => toGray_CvtColor_U0_p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n => toGray_CvtColor_U0_p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read => toGray_CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_V_din => toGray_CvtColor_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => toGray_CvtColor_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => toGray_CvtColor_U0_p_dst_data_stream_V_write);

    toGray_Equalize_U0 : component toGray_Equalize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => toGray_Equalize_U0_ap_start,
        ap_done => toGray_Equalize_U0_ap_done,
        ap_continue => toGray_Equalize_U0_ap_continue,
        ap_idle => toGray_Equalize_U0_ap_idle,
        ap_ready => toGray_Equalize_U0_ap_ready,
        p_src_rows_V_read => toGray_Equalize_U0_p_src_rows_V_read,
        p_src_cols_V_read => toGray_Equalize_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => toGray_Equalize_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => toGray_Equalize_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => toGray_Equalize_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => toGray_Equalize_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => toGray_Equalize_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => toGray_Equalize_U0_p_dst_data_stream_V_write);

    toGray_Mat2AXIvideo_8_1080_1920_0_U0 : component toGray_Mat2AXIvideo_8_1080_1920_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_start,
        ap_done => toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_done,
        ap_continue => toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue,
        ap_idle => toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle,
        ap_ready => toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready,
        img_rows_V_read => toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_rows_V_read,
        img_cols_V_read => toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_cols_V_read,
        img_data_stream_V_dout => toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read,
        OUT_STREAM_TDATA => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDATA,
        OUT_STREAM_TVALID => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TVALID,
        OUT_STREAM_TREADY => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TREADY,
        OUT_STREAM_TKEEP => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TKEEP,
        OUT_STREAM_TSTRB => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TSTRB,
        OUT_STREAM_TUSER => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TUSER,
        OUT_STREAM_TLAST => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TLAST,
        OUT_STREAM_TID => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TID,
        OUT_STREAM_TDEST => toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDEST);

    inMat_rows_V_channel_U : component FIFO_toGray_inMat_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => inMat_rows_V_channel_U_ap_dummy_ce,
        if_din => inMat_rows_V_channel_din,
        if_full_n => inMat_rows_V_channel_full_n,
        if_write => inMat_rows_V_channel_write,
        if_dout => inMat_rows_V_channel_dout,
        if_empty_n => inMat_rows_V_channel_empty_n,
        if_read => inMat_rows_V_channel_read);

    inMat_rows_V_channel1_U : component FIFO_toGray_inMat_rows_V_channel1
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_rows_V_channel1_U_ap_dummy_ce,
        if_write_ce => inMat_rows_V_channel1_U_ap_dummy_ce,
        if_din => inMat_rows_V_channel1_din,
        if_full_n => inMat_rows_V_channel1_full_n,
        if_write => inMat_rows_V_channel1_write,
        if_dout => inMat_rows_V_channel1_dout,
        if_empty_n => inMat_rows_V_channel1_empty_n,
        if_read => inMat_rows_V_channel1_read);

    inMat_cols_V_channel_U : component FIFO_toGray_inMat_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => inMat_cols_V_channel_U_ap_dummy_ce,
        if_din => inMat_cols_V_channel_din,
        if_full_n => inMat_cols_V_channel_full_n,
        if_write => inMat_cols_V_channel_write,
        if_dout => inMat_cols_V_channel_dout,
        if_empty_n => inMat_cols_V_channel_empty_n,
        if_read => inMat_cols_V_channel_read);

    inMat_cols_V_channel1_U : component FIFO_toGray_inMat_cols_V_channel1
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_cols_V_channel1_U_ap_dummy_ce,
        if_write_ce => inMat_cols_V_channel1_U_ap_dummy_ce,
        if_din => inMat_cols_V_channel1_din,
        if_full_n => inMat_cols_V_channel1_full_n,
        if_write => inMat_cols_V_channel1_write,
        if_dout => inMat_cols_V_channel1_dout,
        if_empty_n => inMat_cols_V_channel1_empty_n,
        if_read => inMat_cols_V_channel1_read);

    grayMat_rows_V_U : component FIFO_toGray_grayMat_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grayMat_rows_V_U_ap_dummy_ce,
        if_write_ce => grayMat_rows_V_U_ap_dummy_ce,
        if_din => grayMat_rows_V_din,
        if_full_n => grayMat_rows_V_full_n,
        if_write => grayMat_rows_V_write,
        if_dout => grayMat_rows_V_dout,
        if_empty_n => grayMat_rows_V_empty_n,
        if_read => grayMat_rows_V_read);

    grayMat_cols_V_U : component FIFO_toGray_grayMat_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grayMat_cols_V_U_ap_dummy_ce,
        if_write_ce => grayMat_cols_V_U_ap_dummy_ce,
        if_din => grayMat_cols_V_din,
        if_full_n => grayMat_cols_V_full_n,
        if_write => grayMat_cols_V_write,
        if_dout => grayMat_cols_V_dout,
        if_empty_n => grayMat_cols_V_empty_n,
        if_read => grayMat_cols_V_read);

    outMat_rows_V_U : component FIFO_toGray_outMat_rows_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => outMat_rows_V_U_ap_dummy_ce,
        if_write_ce => outMat_rows_V_U_ap_dummy_ce,
        if_din => outMat_rows_V_din,
        if_full_n => outMat_rows_V_full_n,
        if_write => outMat_rows_V_write,
        if_dout => outMat_rows_V_dout,
        if_empty_n => outMat_rows_V_empty_n,
        if_read => outMat_rows_V_read);

    outMat_cols_V_U : component FIFO_toGray_outMat_cols_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => outMat_cols_V_U_ap_dummy_ce,
        if_write_ce => outMat_cols_V_U_ap_dummy_ce,
        if_din => outMat_cols_V_din,
        if_full_n => outMat_cols_V_full_n,
        if_write => outMat_cols_V_write,
        if_dout => outMat_cols_V_dout,
        if_empty_n => outMat_cols_V_empty_n,
        if_read => outMat_cols_V_read);

    inMat_data_stream_0_V_U : component FIFO_toGray_inMat_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => inMat_data_stream_0_V_U_ap_dummy_ce,
        if_din => inMat_data_stream_0_V_din,
        if_full_n => inMat_data_stream_0_V_full_n,
        if_write => inMat_data_stream_0_V_write,
        if_dout => inMat_data_stream_0_V_dout,
        if_empty_n => inMat_data_stream_0_V_empty_n,
        if_read => inMat_data_stream_0_V_read);

    inMat_data_stream_1_V_U : component FIFO_toGray_inMat_data_stream_1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_data_stream_1_V_U_ap_dummy_ce,
        if_write_ce => inMat_data_stream_1_V_U_ap_dummy_ce,
        if_din => inMat_data_stream_1_V_din,
        if_full_n => inMat_data_stream_1_V_full_n,
        if_write => inMat_data_stream_1_V_write,
        if_dout => inMat_data_stream_1_V_dout,
        if_empty_n => inMat_data_stream_1_V_empty_n,
        if_read => inMat_data_stream_1_V_read);

    inMat_data_stream_2_V_U : component FIFO_toGray_inMat_data_stream_2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => inMat_data_stream_2_V_U_ap_dummy_ce,
        if_write_ce => inMat_data_stream_2_V_U_ap_dummy_ce,
        if_din => inMat_data_stream_2_V_din,
        if_full_n => inMat_data_stream_2_V_full_n,
        if_write => inMat_data_stream_2_V_write,
        if_dout => inMat_data_stream_2_V_dout,
        if_empty_n => inMat_data_stream_2_V_empty_n,
        if_read => inMat_data_stream_2_V_read);

    grayMat_data_stream_0_V_U : component FIFO_toGray_grayMat_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grayMat_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => grayMat_data_stream_0_V_U_ap_dummy_ce,
        if_din => grayMat_data_stream_0_V_din,
        if_full_n => grayMat_data_stream_0_V_full_n,
        if_write => grayMat_data_stream_0_V_write,
        if_dout => grayMat_data_stream_0_V_dout,
        if_empty_n => grayMat_data_stream_0_V_empty_n,
        if_read => grayMat_data_stream_0_V_read);

    outMat_data_stream_0_V_U : component FIFO_toGray_outMat_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => outMat_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => outMat_data_stream_0_V_U_ap_dummy_ce,
        if_din => outMat_data_stream_0_V_din,
        if_full_n => outMat_data_stream_0_V_full_n,
        if_write => outMat_data_stream_0_V_write,
        if_dout => outMat_data_stream_0_V_dout,
        if_empty_n => outMat_data_stream_0_V_empty_n,
        if_read => outMat_data_stream_0_V_read);





    -- ap_reg_procdone_toGray_AXIvideo2Mat_U0 assign process. --
    ap_reg_procdone_toGray_AXIvideo2Mat_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_toGray_AXIvideo2Mat_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_toGray_AXIvideo2Mat_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = toGray_AXIvideo2Mat_U0_ap_done)) then 
                    ap_reg_procdone_toGray_AXIvideo2Mat_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_toGray_Block_proc_U0 assign process. --
    ap_reg_procdone_toGray_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_toGray_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_toGray_Block_proc_U0 <= ap_const_logic_0;
                elsif ((toGray_Block_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_toGray_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_toGray_CvtColor_U0 assign process. --
    ap_reg_procdone_toGray_CvtColor_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_toGray_CvtColor_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_toGray_CvtColor_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = toGray_CvtColor_U0_ap_done)) then 
                    ap_reg_procdone_toGray_CvtColor_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_toGray_Equalize_U0 assign process. --
    ap_reg_procdone_toGray_Equalize_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_toGray_Equalize_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_toGray_Equalize_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = toGray_Equalize_U0_ap_done)) then 
                    ap_reg_procdone_toGray_Equalize_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0 assign process. --
    ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)) then 
                    ap_reg_procdone_toGray_Mat2AXIvideo_8_1080_1920_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_grayMat_cols_V_full_n assign process. --
    ap_reg_ready_grayMat_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_grayMat_cols_V_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_grayMat_cols_V_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = grayMat_cols_V_full_n))) then 
                    ap_reg_ready_grayMat_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_grayMat_rows_V_full_n assign process. --
    ap_reg_ready_grayMat_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_grayMat_rows_V_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_grayMat_rows_V_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = grayMat_rows_V_full_n))) then 
                    ap_reg_ready_grayMat_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_inMat_cols_V_channel1_full_n assign process. --
    ap_reg_ready_inMat_cols_V_channel1_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_inMat_cols_V_channel1_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_inMat_cols_V_channel1_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = inMat_cols_V_channel1_full_n))) then 
                    ap_reg_ready_inMat_cols_V_channel1_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_inMat_cols_V_channel_full_n assign process. --
    ap_reg_ready_inMat_cols_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_inMat_cols_V_channel_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_inMat_cols_V_channel_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (inMat_cols_V_channel_full_n = ap_const_logic_1))) then 
                    ap_reg_ready_inMat_cols_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_inMat_rows_V_channel1_full_n assign process. --
    ap_reg_ready_inMat_rows_V_channel1_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_inMat_rows_V_channel1_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_inMat_rows_V_channel1_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = inMat_rows_V_channel1_full_n))) then 
                    ap_reg_ready_inMat_rows_V_channel1_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_inMat_rows_V_channel_full_n assign process. --
    ap_reg_ready_inMat_rows_V_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_inMat_rows_V_channel_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_inMat_rows_V_channel_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = inMat_rows_V_channel_full_n))) then 
                    ap_reg_ready_inMat_rows_V_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_outMat_cols_V_full_n assign process. --
    ap_reg_ready_outMat_cols_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_outMat_cols_V_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_outMat_cols_V_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = outMat_cols_V_full_n))) then 
                    ap_reg_ready_outMat_cols_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_outMat_rows_V_full_n assign process. --
    ap_reg_ready_outMat_rows_V_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_outMat_rows_V_full_n <= ap_const_logic_0;
            else
                if (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (toGray_Block_proc_U0_ap_continue = ap_const_logic_1))) then 
                    ap_reg_ready_outMat_rows_V_full_n <= ap_const_logic_0;
                elsif (((toGray_Block_proc_U0_ap_done = ap_const_logic_1) and (ap_const_logic_1 = outMat_rows_V_full_n))) then 
                    ap_reg_ready_outMat_rows_V_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    IN_STREAM_TREADY <= toGray_AXIvideo2Mat_U0_IN_STREAM_TREADY;
    OUT_STREAM_TDATA <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDATA;
    OUT_STREAM_TDEST <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TDEST;
    OUT_STREAM_TID <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TID;
    OUT_STREAM_TKEEP <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TKEEP;
    OUT_STREAM_TLAST <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TLAST;
    OUT_STREAM_TSTRB <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TSTRB;
    OUT_STREAM_TUSER <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TUSER;
    OUT_STREAM_TVALID <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TVALID;

    -- ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V assign process. --
    ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_grayMat_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_grayMat_cols_V_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V assign process. --
    ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_grayMat_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_grayMat_rows_V_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel assign process. --
    ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_inMat_cols_V_channel_full_n)
    begin
        if ((ap_reg_ready_inMat_cols_V_channel_full_n = ap_const_logic_1)) then 
            ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1 assign process. --
    ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_inMat_cols_V_channel1_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_inMat_cols_V_channel1_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1 <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1 <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel assign process. --
    ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_inMat_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_inMat_rows_V_channel_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1 assign process. --
    ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_inMat_rows_V_channel1_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_inMat_rows_V_channel1_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1 <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1 <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_outMat_cols_V assign process. --
    ap_chn_write_toGray_Block_proc_U0_outMat_cols_V_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_outMat_cols_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_outMat_cols_V_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_outMat_cols_V <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_outMat_cols_V <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_toGray_Block_proc_U0_outMat_rows_V assign process. --
    ap_chn_write_toGray_Block_proc_U0_outMat_rows_V_assign_proc : process(toGray_Block_proc_U0_ap_done, ap_reg_ready_outMat_rows_V_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_outMat_rows_V_full_n)) then 
            ap_chn_write_toGray_Block_proc_U0_outMat_rows_V <= ap_const_logic_0;
        else 
            ap_chn_write_toGray_Block_proc_U0_outMat_rows_V <= toGray_Block_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(toGray_Block_proc_U0_ap_idle, toGray_AXIvideo2Mat_U0_ap_idle, toGray_CvtColor_U0_ap_idle, toGray_Equalize_U0_ap_idle, toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle, inMat_rows_V_channel_empty_n, inMat_rows_V_channel1_empty_n, inMat_cols_V_channel_empty_n, inMat_cols_V_channel1_empty_n, grayMat_rows_V_empty_n, grayMat_cols_V_empty_n, outMat_rows_V_empty_n, outMat_cols_V_empty_n)
    begin
        if (((toGray_Block_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = toGray_AXIvideo2Mat_U0_ap_idle) and (ap_const_logic_1 = toGray_CvtColor_U0_ap_idle) and (ap_const_logic_1 = toGray_Equalize_U0_ap_idle) and (ap_const_logic_1 = toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_idle) and (ap_const_logic_0 = inMat_rows_V_channel_empty_n) and (ap_const_logic_0 = inMat_rows_V_channel1_empty_n) and (ap_const_logic_0 = inMat_cols_V_channel_empty_n) and (ap_const_logic_0 = inMat_cols_V_channel1_empty_n) and (ap_const_logic_0 = grayMat_rows_V_empty_n) and (ap_const_logic_0 = grayMat_cols_V_empty_n) and (ap_const_logic_0 = outMat_rows_V_empty_n) and (ap_const_logic_0 = outMat_cols_V_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)
    begin
        if ((ap_const_logic_1 = toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_grayMat_cols_V_full_n assign process. --
    ap_sig_ready_grayMat_cols_V_full_n_assign_proc : process(grayMat_cols_V_full_n, ap_reg_ready_grayMat_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_grayMat_cols_V_full_n)) then 
            ap_sig_ready_grayMat_cols_V_full_n <= grayMat_cols_V_full_n;
        else 
            ap_sig_ready_grayMat_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_grayMat_rows_V_full_n assign process. --
    ap_sig_ready_grayMat_rows_V_full_n_assign_proc : process(grayMat_rows_V_full_n, ap_reg_ready_grayMat_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_grayMat_rows_V_full_n)) then 
            ap_sig_ready_grayMat_rows_V_full_n <= grayMat_rows_V_full_n;
        else 
            ap_sig_ready_grayMat_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_inMat_cols_V_channel1_full_n assign process. --
    ap_sig_ready_inMat_cols_V_channel1_full_n_assign_proc : process(inMat_cols_V_channel1_full_n, ap_reg_ready_inMat_cols_V_channel1_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_inMat_cols_V_channel1_full_n)) then 
            ap_sig_ready_inMat_cols_V_channel1_full_n <= inMat_cols_V_channel1_full_n;
        else 
            ap_sig_ready_inMat_cols_V_channel1_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_inMat_cols_V_channel_full_n assign process. --
    ap_sig_ready_inMat_cols_V_channel_full_n_assign_proc : process(inMat_cols_V_channel_full_n, ap_reg_ready_inMat_cols_V_channel_full_n)
    begin
        if ((ap_reg_ready_inMat_cols_V_channel_full_n = ap_const_logic_0)) then 
            ap_sig_ready_inMat_cols_V_channel_full_n <= inMat_cols_V_channel_full_n;
        else 
            ap_sig_ready_inMat_cols_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_inMat_rows_V_channel1_full_n assign process. --
    ap_sig_ready_inMat_rows_V_channel1_full_n_assign_proc : process(inMat_rows_V_channel1_full_n, ap_reg_ready_inMat_rows_V_channel1_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_inMat_rows_V_channel1_full_n)) then 
            ap_sig_ready_inMat_rows_V_channel1_full_n <= inMat_rows_V_channel1_full_n;
        else 
            ap_sig_ready_inMat_rows_V_channel1_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_inMat_rows_V_channel_full_n assign process. --
    ap_sig_ready_inMat_rows_V_channel_full_n_assign_proc : process(inMat_rows_V_channel_full_n, ap_reg_ready_inMat_rows_V_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_inMat_rows_V_channel_full_n)) then 
            ap_sig_ready_inMat_rows_V_channel_full_n <= inMat_rows_V_channel_full_n;
        else 
            ap_sig_ready_inMat_rows_V_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_outMat_cols_V_full_n assign process. --
    ap_sig_ready_outMat_cols_V_full_n_assign_proc : process(outMat_cols_V_full_n, ap_reg_ready_outMat_cols_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_outMat_cols_V_full_n)) then 
            ap_sig_ready_outMat_cols_V_full_n <= outMat_cols_V_full_n;
        else 
            ap_sig_ready_outMat_cols_V_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_outMat_rows_V_full_n assign process. --
    ap_sig_ready_outMat_rows_V_full_n_assign_proc : process(outMat_rows_V_full_n, ap_reg_ready_outMat_rows_V_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_outMat_rows_V_full_n)) then 
            ap_sig_ready_outMat_rows_V_full_n <= outMat_rows_V_full_n;
        else 
            ap_sig_ready_outMat_rows_V_full_n <= ap_const_logic_1;
        end if; 
    end process;

    ap_sig_top_allready <= toGray_AXIvideo2Mat_U0_ap_ready;
    grayMat_cols_V_U_ap_dummy_ce <= ap_const_logic_1;
    grayMat_cols_V_din <= toGray_Block_proc_U0_ap_return_5;
    grayMat_cols_V_read <= toGray_Equalize_U0_ap_ready;
    grayMat_cols_V_write <= ap_chn_write_toGray_Block_proc_U0_grayMat_cols_V;
    grayMat_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    grayMat_data_stream_0_V_din <= toGray_CvtColor_U0_p_dst_data_stream_V_din;
    grayMat_data_stream_0_V_read <= toGray_Equalize_U0_p_src_data_stream_V_read;
    grayMat_data_stream_0_V_write <= toGray_CvtColor_U0_p_dst_data_stream_V_write;
    grayMat_rows_V_U_ap_dummy_ce <= ap_const_logic_1;
    grayMat_rows_V_din <= toGray_Block_proc_U0_ap_return_4;
    grayMat_rows_V_read <= toGray_Equalize_U0_ap_ready;
    grayMat_rows_V_write <= ap_chn_write_toGray_Block_proc_U0_grayMat_rows_V;
    inMat_cols_V_channel1_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_cols_V_channel1_din <= toGray_Block_proc_U0_ap_return_3;
    inMat_cols_V_channel1_read <= toGray_CvtColor_U0_ap_ready;
    inMat_cols_V_channel1_write <= ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel1;
    inMat_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_cols_V_channel_din <= toGray_Block_proc_U0_ap_return_2;
    inMat_cols_V_channel_read <= toGray_AXIvideo2Mat_U0_ap_ready;
    inMat_cols_V_channel_write <= ap_chn_write_toGray_Block_proc_U0_inMat_cols_V_channel;
    inMat_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_data_stream_0_V_din <= toGray_AXIvideo2Mat_U0_img_data_stream_0_V_din;
    inMat_data_stream_0_V_read <= toGray_CvtColor_U0_p_src_data_stream_0_V_read;
    inMat_data_stream_0_V_write <= toGray_AXIvideo2Mat_U0_img_data_stream_0_V_write;
    inMat_data_stream_1_V_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_data_stream_1_V_din <= toGray_AXIvideo2Mat_U0_img_data_stream_1_V_din;
    inMat_data_stream_1_V_read <= toGray_CvtColor_U0_p_src_data_stream_1_V_read;
    inMat_data_stream_1_V_write <= toGray_AXIvideo2Mat_U0_img_data_stream_1_V_write;
    inMat_data_stream_2_V_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_data_stream_2_V_din <= toGray_AXIvideo2Mat_U0_img_data_stream_2_V_din;
    inMat_data_stream_2_V_read <= toGray_CvtColor_U0_p_src_data_stream_2_V_read;
    inMat_data_stream_2_V_write <= toGray_AXIvideo2Mat_U0_img_data_stream_2_V_write;
    inMat_rows_V_channel1_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_rows_V_channel1_din <= toGray_Block_proc_U0_ap_return_1;
    inMat_rows_V_channel1_read <= toGray_CvtColor_U0_ap_ready;
    inMat_rows_V_channel1_write <= ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel1;
    inMat_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    inMat_rows_V_channel_din <= toGray_Block_proc_U0_ap_return_0;
    inMat_rows_V_channel_read <= toGray_AXIvideo2Mat_U0_ap_ready;
    inMat_rows_V_channel_write <= ap_chn_write_toGray_Block_proc_U0_inMat_rows_V_channel;
    outMat_cols_V_U_ap_dummy_ce <= ap_const_logic_1;
    outMat_cols_V_din <= toGray_Block_proc_U0_ap_return_7;
    outMat_cols_V_read <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready;
    outMat_cols_V_write <= ap_chn_write_toGray_Block_proc_U0_outMat_cols_V;
    outMat_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    outMat_data_stream_0_V_din <= toGray_Equalize_U0_p_dst_data_stream_V_din;
    outMat_data_stream_0_V_read <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_read;
    outMat_data_stream_0_V_write <= toGray_Equalize_U0_p_dst_data_stream_V_write;
    outMat_rows_V_U_ap_dummy_ce <= ap_const_logic_1;
    outMat_rows_V_din <= toGray_Block_proc_U0_ap_return_6;
    outMat_rows_V_read <= toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_ready;
    outMat_rows_V_write <= ap_chn_write_toGray_Block_proc_U0_outMat_rows_V;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TDATA <= IN_STREAM_TDATA;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TDEST <= IN_STREAM_TDEST;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TID <= IN_STREAM_TID;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TKEEP <= IN_STREAM_TKEEP;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TLAST <= IN_STREAM_TLAST;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TSTRB <= IN_STREAM_TSTRB;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TUSER <= IN_STREAM_TUSER;
    toGray_AXIvideo2Mat_U0_IN_STREAM_TVALID <= IN_STREAM_TVALID;
    toGray_AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    toGray_AXIvideo2Mat_U0_ap_start <= (ap_start and inMat_rows_V_channel_empty_n and inMat_cols_V_channel_empty_n);
    toGray_AXIvideo2Mat_U0_img_cols_V_read <= inMat_cols_V_channel_dout;
    toGray_AXIvideo2Mat_U0_img_data_stream_0_V_full_n <= inMat_data_stream_0_V_full_n;
    toGray_AXIvideo2Mat_U0_img_data_stream_1_V_full_n <= inMat_data_stream_1_V_full_n;
    toGray_AXIvideo2Mat_U0_img_data_stream_2_V_full_n <= inMat_data_stream_2_V_full_n;
    toGray_AXIvideo2Mat_U0_img_rows_V_read <= inMat_rows_V_channel_dout;

    -- toGray_Block_proc_U0_ap_continue assign process. --
    toGray_Block_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_inMat_cols_V_channel_full_n, ap_sig_ready_inMat_rows_V_channel1_full_n, ap_sig_ready_inMat_rows_V_channel_full_n, ap_sig_ready_inMat_cols_V_channel1_full_n, ap_sig_ready_grayMat_rows_V_full_n, ap_sig_ready_grayMat_cols_V_full_n, ap_sig_ready_outMat_rows_V_full_n, ap_sig_ready_outMat_cols_V_full_n)
    begin
        if (((ap_sig_ready_inMat_cols_V_channel_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_sig_ready_inMat_rows_V_channel1_full_n) and (ap_const_logic_1 = ap_sig_ready_inMat_rows_V_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_inMat_cols_V_channel1_full_n) and (ap_const_logic_1 = ap_sig_ready_grayMat_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_grayMat_cols_V_full_n) and (ap_const_logic_1 = ap_sig_ready_outMat_rows_V_full_n) and (ap_const_logic_1 = ap_sig_ready_outMat_cols_V_full_n))) then 
            toGray_Block_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            toGray_Block_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    toGray_Block_proc_U0_ap_start <= ap_start;
    toGray_Block_proc_U0_cols <= cols;
    toGray_Block_proc_U0_rows <= rows;
    toGray_CvtColor_U0_ap_continue <= ap_const_logic_1;
    toGray_CvtColor_U0_ap_start <= (inMat_rows_V_channel1_empty_n and inMat_cols_V_channel1_empty_n);
    toGray_CvtColor_U0_p_dst_data_stream_V_full_n <= grayMat_data_stream_0_V_full_n;
    toGray_CvtColor_U0_p_src_cols_V_read <= inMat_cols_V_channel1_dout;
    toGray_CvtColor_U0_p_src_data_stream_0_V_dout <= inMat_data_stream_0_V_dout;
    toGray_CvtColor_U0_p_src_data_stream_0_V_empty_n <= inMat_data_stream_0_V_empty_n;
    toGray_CvtColor_U0_p_src_data_stream_1_V_dout <= inMat_data_stream_1_V_dout;
    toGray_CvtColor_U0_p_src_data_stream_1_V_empty_n <= inMat_data_stream_1_V_empty_n;
    toGray_CvtColor_U0_p_src_data_stream_2_V_dout <= inMat_data_stream_2_V_dout;
    toGray_CvtColor_U0_p_src_data_stream_2_V_empty_n <= inMat_data_stream_2_V_empty_n;
    toGray_CvtColor_U0_p_src_rows_V_read <= inMat_rows_V_channel1_dout;
    toGray_Equalize_U0_ap_continue <= ap_const_logic_1;
    toGray_Equalize_U0_ap_start <= (grayMat_rows_V_empty_n and grayMat_cols_V_empty_n);
    toGray_Equalize_U0_p_dst_data_stream_V_full_n <= outMat_data_stream_0_V_full_n;
    toGray_Equalize_U0_p_src_cols_V_read <= grayMat_cols_V_dout;
    toGray_Equalize_U0_p_src_data_stream_V_dout <= grayMat_data_stream_0_V_dout;
    toGray_Equalize_U0_p_src_data_stream_V_empty_n <= grayMat_data_stream_0_V_empty_n;
    toGray_Equalize_U0_p_src_rows_V_read <= grayMat_rows_V_dout;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_OUT_STREAM_TREADY <= OUT_STREAM_TREADY;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_continue <= ap_sig_hs_continue;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_ap_start <= (outMat_rows_V_empty_n and outMat_cols_V_empty_n);
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_cols_V_read <= outMat_cols_V_dout;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_dout <= outMat_data_stream_0_V_dout;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_data_stream_V_empty_n <= outMat_data_stream_0_V_empty_n;
    toGray_Mat2AXIvideo_8_1080_1920_0_U0_img_rows_V_read <= outMat_rows_V_dout;
end behav;
